npm init -y
npm express ejs body-parser



nodemon app.js

run:
    npm install
    # to install all the dependences from the package.json



#Level 1:
    creating account : Email & Password
    Storing the password in the database
    Stored at server level

    run:
        npm i mongoose
        nodemon app.js

    help:
        start/ shutdown mongod https://www.mongodb.com/docs/manual/tutorial/manage-mongodb-processes/



#Level 2:
    add database encryption
    hacking the database can only get the encryption password
    but hacking the website may find the encryption key and be able to decrypt it

    library:
        mongoose-encryption

    encryption -> authentication

    run: 
        npm i mongoose-encryption

    description:
        During save, documents are encrypted and then signed. 
        During find, documents are authenticated and then decrypted.



#Level 2.5:
    add environment variables

    package:
        dotenv

    run:
        npm i dotenv

    notice:
        heroku using the same way as dotenv to set the config file



#Level 3:
    hashing -> takes away the encryption key 
    hash is designed to be caculated very quickly forwards, but almost impossible to go backwards

    package:
        MD5

    run:
        npm i md5

    notice:
        the hash result of an input will always be the same

    problem:
        hack: make a hash of words/sentences to match the hash database to get the origin password



#Level 4:
    #################################
    Hasing & Salting
        salting: generate a random set of characters that combined with the password before hashing
        database only stores the Salt and Hash value

    #################################
    Change Hash Algorithm:
        bcrypt hash algorithm -> run hash slower -> takes more time to hack

    #################################
    Salt Round:
        define how many round to salt the password
        plain text + salt -> hash + new salt -> hash + new salt -> final hash

        needs to store the salting round number

    run:
        npm i bcrypt

    Notice:
        how the compare function knows the round?
        the hash value is "$2b$10$RfLtQDXojBpPU3fZ/VsYReJ6Mc4vxgyxrBryxYvhxoZBREVXKKlIi"
        $2b$10 means 10 rounds 
        The salt is RfLtQDXojBpPU3fZ
        The hash is VsYReJ6Mc4vxgyxrBryxYvhxoZBREVXKKlIi



#Level 5:
    Cookie and Session
    cookie is sent with get request to help the server identify the request source
    cookie is stored after post request, the server send back some information was stored as cookie

    Package:
        passport
        passport-local
        passport-local-mongoose
        express-session NOT express-sessions

    run:
        npm i passport passport-local passport-local-mongoose express-session

    notice:
        serialise: store the message into a cookie
        deserialise: crumble the cookie and discover the message inside



#Level 6:
    Third party OAuth -> Open Authorisation
    delegate the password duty to third party companies

    Special:
        1. Granular Access Levels
        2. Read/Read+Write Access
        3. Revoke Access

    Step:
        1. Set up App on their website
        2. Redirect to Authenticate
        3. User Logs In
        4. User Grants Permissions to App
        5. Our App Reveive Authorisation code from third party company
        6. Exchange AuthCode for Access Token -> valid for a lot longer than the authentication token
            Use to access pieces of information that are stored on that user's account on the third party website

    Implementation:
        login with google

    Library:
        passport google : https://www.passportjs.org/packages/passport-google-oauth20/
    
    Run:
        npm install passport-google-oauth20
    